{"version":3,"sources":["store/actions/type.js","store/reducers/repositories-reducer.js","store/reducers/commits-reducer.js","store/reducers/index.js","store/index.js","components/select-app/header/index.js","components/select-app/section/index.js","store/actions/index.js","components/select-app/select/index.js","components/select-app/repository-selected/index.js","components/select-app/repository-commit/index.js","components/select-app/main/index.js","components/select-app/index.js","root/index.js","index.js"],"names":["GET_REPOSITORIES","SELECTED_REPOSITORY","GET_COMMITS","initialState","repositories","id","name","commits","commit","author","message","sha","rootReducer","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","middlewares","promise","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","apply","HeaderSelect","react_default","a","createElement","Component","SectionSelect","this","props","sectionContent","BASE_URL_GIT","_callee","response","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","map","_ref","abrupt","stop","_callee2","repoName","_context2","_ref2","Select","changeRepository","e","option","target","querySelector","value","_this","getSelectedRepository","getCommitsRepository","getAttribute","getRepositories","onChange","repo","key","data-name","connect","_getRepositories","repository","parseInt","selected","_x","_getCommitsRepository","RepositorySelected","section","RepositoryCommit","MainSelect","select_app_select","repository_selected","repository_commit","AppSelect","Fragment","header","main","Root","es","react_router_dom","react_router","path","component","ReactDOM","render","root","document","getElementById"],"mappings":"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","file":"static/js/main.f3433214.chunk.js","sourcesContent":["export const GET_REPOSITORIES = \"GET_REPOSITORIES\";\nexport const SELECTED_REPOSITORY = \"SELECTED_REPOSITORY\";\nexport const GET_COMMITS = \"GET_COMMITS\";","import { GET_REPOSITORIES, SELECTED_REPOSITORY } from '../actions/type';\n\nconst initialState = {\n    \"repositories\": [{\n        \"id\": 0,\n        \"name\": \"Não há repositórios\"\n    }]\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_REPOSITORIES:\n            return {\n                ...state, \n                repositories: action.repositories\n            };\n        case SELECTED_REPOSITORY:\n            return {\n                ...state,\n                repositories: action.repositories\n            }\n        default:\n            return state;\n    }\n}","import { GET_COMMITS } from '../actions/type';\n\nconst initialState = {\n    \"commits\": [{\n        \"commit\": {\n            \"author\": {\n                \"name\": \"\"\n            },\n            \"message\": \"\"\n        },\n        \"sha\": 0\n    }]\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_COMMITS:\n            return {\n                ...state,\n                commits: action.commits\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport repositoriesReducers from './repositories-reducer';\nimport commitsReducers from './commits-reducer';\n\nconst rootReducer = combineReducers({\n    repositories: repositoriesReducers,\n    commits: commitsReducers\n});\n  \nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport promise from 'redux-promise';\nimport reducers from \"./reducers\";\n\nconst middlewares = [promise];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(\n\tapplyMiddleware(...middlewares)\n));\n\nexport default store;","import React, { Component } from 'react';\n\n\nclass HeaderSelect extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Example select element with view.</h1>\n      </header>\n    );\n  }\n}\n\nexport default HeaderSelect;\n","import React, { Component } from 'react';\n\n\nclass SectionSelect extends Component {\n  render() {\n    return (\n      <section>\n        { this.props.sectionContent }\n      </section>\n    );\n  }\n}\n\nexport default SectionSelect;\n","import { GET_REPOSITORIES, SELECTED_REPOSITORY, GET_COMMITS } from './type';\n\nconst BASE_URL_GIT = \"https://api.github.com\";\n\nexport async function getRepositories() {\n    const response = await fetch(`${BASE_URL_GIT}/users/vbobell/repos`);\n    let repositories = await response.json();\n\n    repositories = repositories.map(( { id, name } ) => {\n        return { id, name }\n    });\n\n    \n    return {\n        type: GET_REPOSITORIES,\n        repositories\n    }\n}\n\nexport function getSelectedRepository(id) {\n    let repositories = this.repositories.map((repository) => {\n        repository.id === parseInt(id) ? repository.selected = true : repository.selected = false;\n        return repository;\n    });\n\n    return {\n        type: SELECTED_REPOSITORY,\n        repositories\n    }\n}\n\nexport async function getCommitsRepository(repoName) {\n    const response = await fetch(`${BASE_URL_GIT}/repos/vbobell/${repoName}/commits`);\n    let commits = await response.json();\n\n    commits = commits.map(( { commit, sha } ) => {\n        return { commit, sha }\n    });\n\n    return {\n        type: GET_COMMITS,\n        commits\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getRepositories, getSelectedRepository, getCommitsRepository } from '../../../store/actions';\n\nclass Select extends Component {\n  componentDidMount() {\n    this.props.getRepositories();\n  }\n\n  changeRepository = (e) => {\n    let option = e.target.querySelector(`option[value=\"${e.target.value}\"]`);\n    \n    this.props.getSelectedRepository(e.target.value);\n    this.props.getCommitsRepository(option.getAttribute('data-name'));\n  }\n\n  render() {\n    return (\n      <select onChange={this.changeRepository}>\n        { \n          this.props.repositories.map((repo) => {\n            return <option key={repo.id} value={repo.id} data-name={repo.name}>{repo.name}</option>\n          }) \n        }\n      </select>\n    );\n  }\n}\n\nconst mapStateToProps = ({ repositories }) => {\n  return {\n    repositories: repositories.repositories\n  }\n}\n\nexport default connect(mapStateToProps, { getRepositories, getSelectedRepository, getCommitsRepository })(Select);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Section from '../section';\n\nclass RepositorySelected extends Component {\n    render() {\n        return (\n            <Section sectionContent={\n                this.props.repositories.map((repository) => {\n                    return repository.selected ? repository.name : \"\"\n                })\n            } />\n        );\n    }\n}\nconst mapStateToProps = ({ repositories }) => {\n    return {\n        repositories: repositories.repositories\n    }\n}\n\nexport default connect(mapStateToProps)(RepositorySelected);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Section from '../section';\n\nclass RepositoryCommit extends Component {\n    render() {\n        return (\n            <Section sectionContent={\n                this.props.commits.map(({ commit, sha }) => {\n                    return (\n                        <article key={sha}>\n                            <h3>{commit.author.name}</h3>\n                            <p>{commit.message}</p>\n                        </article>\n                    )\n                })\n            } />\n        );\n    }\n}\nconst mapStateToProps = ({ commits }) => {\n    return {\n        commits: commits.commits\n    }\n}\n\nexport default connect(mapStateToProps)(RepositoryCommit);","import React, { Component } from 'react';\nimport SectionSelect from '../section';\nimport Select from '../select';\nimport RepositorySelected from '../repository-selected';\nimport RepositoryCommit from '../repository-commit';\n\nclass MainSelect extends Component {\n  render() {\n    return (\n      <main>\n        <SectionSelect sectionContent={<Select/>}/>\n        <RepositorySelected/>\n        <RepositoryCommit/>\n      </main>\n    );\n  }\n}\n\nexport default MainSelect;\n","import React, { Component } from 'react';\nimport HeaderSelect from './header';\nimport MainSelect from './main';\n\nclass AppSelect extends Component {\n  render() {\n    return (\n      <>\n        <HeaderSelect/>\n        <MainSelect/>\n      </>\n    );\n  }\n}\n\nexport default AppSelect;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport store from '../store';\nimport AppSelect from '../components/select-app';\n\nconst Root = () => {\n    return (<Provider store={store}>\n            <BrowserRouter>\n            <Switch>\n                <Route path=\"/show-repository-commits\" component={AppSelect} />\n            </Switch>\n            </ BrowserRouter>\n            </Provider>)\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}